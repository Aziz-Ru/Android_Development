<resources>
    <string name="app_name">Git</string>
    <string name="git_intialization">গিট পরিচিতি</string>
    <string name="exit">প্রস্থান করুন</string>

    <string name="what_state">গিট স্টেট কি?</string>
    <string name="whats_repo">গিট রিপজিটরি  কি ?</string>
    <string name="What_vcs">ভার্সন কন্ট্রোল সিস্টেম কি?</string>
    <string name="Git_Init">git init এর ব্যবহার :</string>
    <string name="Git_Add">git add এর ব্যবহার :</string>
    <string name="Git_Commit">git commit এর ব্যবহার :</string>
    <string name="Git_remote">git remote এর ব্যবহার :</string>
    <string name="Git_push">git push এর ব্যবহার :</string>
    <string name="Git_branch">git branch এর ব্যবহার :</string>
    <string name="Git_merge">git merge এর ব্যবহার :</string>

    <string name="vcs_git_Button">VCS ও Git এর পরিচিতি </string>
    <string name="states_Button">Git State ও Repository পরিচিতি </string>
    <string name="branch_button">git branch ও merge এর পরিচিতি </string>
    <string name="commit_button">git init,add ও commit এর পরিচিতি </string>
    <string name="clone_pull_button">git clone ও pull এর পরিচিতি</string>
    <string name="push_button">git remote ও push এর পরিচিতি</string>
    <string name="config_button">git config এর পরিচিতি</string>
    <string name="ssh_key">ssh-key এর পরিচিতি</string>
    <string name="git_diff_1">এখন দুটি  ব্রাঞ্চের মধ্যে পার্থক্য দেখতে পারেন |  আপনার আগের ব্রাঞ্চের কী কী কোড পরিবর্তন হয়েছে, কোথায় কোড অ্যাড করা হয়েছে, কোথায় ডিলেট করা হয়েছে, এগুলোও সব দেখতে পারবো নিচের গিটের কমান্ডের সাহায্যেঃ\ngit diff branch1..branch2\n  আপনি চাইলে আপনার এক কমিটের সাথে অন্য যে কোনো কমিটের পার্থক্য দেখতে পারেন \ngit diff compareFromId compareAgainstID \n কমান্ডের সাহায্যে | আপনি চাইলে যেকোন ব্রাঞ্চেকে ডিলেট  করতে পারেন  নিচের গিটের কমান্ডের সাহায্যেঃ\ngit branch -d branch_name</string>
    <string name="git_branch_name_change">আপনি চাইলে যেকোন ব্রাঞ্চের নাম পরিবতর্ন  করতে পারেন সেজন ওই ব্রাঞ্চে  যেতে হবে এবং আপনাকে নিচের গিটের কমান্ডের সাহায্যেঃ\ngit branch -m new branch name</string>
    <string name="git_branch_1">আমরা এখন নতুন একটা ব্রাঞ্চ তৈরী করবো newBranch নাম দিয়ে, এর জন্য আপনাকে নিচের কমান্ডটি লিখতে হবে :\ngit branch newBranch</string>
    <string name="git_branch_2">ব্রাঞ্চতো তৈরী হয়েগেলো, এখন আমরা আমাদের তৈরি ব্রাঞ্চ এর checkout করব। ব্রাঞ্চ চেকআউট করার জন্য আপনাকে নিচের কমান্ডটি ব্যবহার করতে হবে :\ngit checkout newBranch\nতবে আপনি যদি চান নতুন ব্রাঞ্চ তৈরী করে সাথে সাথে সেই ব্রাঞ্চে চেক-আউট হয়ে যাবে, তাহলে আপনাকে নিচের কমান্ডটি লিখতে হবে :\ngit checkout -b newBranch</string>
    <string name="git_merge_des"> এখন আমরা ru এ করা মডিফিকেশনগুলো master branch এর সাথে merge করব। আর এর জন্য আপনাকে মাস্টার ব্রাঞ্চে থাকা অবস্থায় এই কমান্ড দিলেই অটোম্যাটিক মার্জ হয়ে যাবেঃgit merge ru</string>
    <string name="vcs_Description">যে পদ্ধতিতে কোনও প্রজেক্টের ফাইলগুলোর পরিবর্তন ট্র্যাক করে রাখা হয় যাতে করে আমরা পরে দরকারে আগের নির্দিস্ট ভার্সনে যেতে পারি তাকে ভার্সন কন্ট্রোল সিস্টেম বলে। সাধরণত ভার্সন কন্ট্রোল সিস্টেম তিন ধরনের |১.Local Version Control System .২.Centralized Version Control System.৩.Distributed Version Control System.\n\nDVCSএক ধরনের VCS যেখানে একটি সম্পূর্ন পোজেক্টের কপি ডেভেলপাররা নিজের মতো ডেভেলপ করতে পারে  এবং সোস্ কোডে আড করতে পারে | এদের মধ্যে গিট DVCS|বর্তমানে ব্যবহৃত সবচেয়ে জনপ্রিয় ভিসিএস হল গিট, 70% ডেভেলপাররা এটিকে তাদের প্রাথমিক ভিসিএস হিসাবে ব্যবহার করে| গিট প্রায় যেকোনো ফাইলের পরিবর্তন গুলো ট্র্যাক করে রাখতে পারে।
    </string>
    <string name="push_des">লোকাল কমিটকে রিমোট রিপজিটরিতে আপলোড করতে\ngit push remote_name branch_name\nকমান্ড ব্যবহৃত হয়|</string>

    <string name="git_remot">গিটহাবের নতুন রিপোজিটরির সাথে আমাদের লোকাল কোন ডিরেক্টরির মধ্যে রিমোট কানেকশন তৈরিতে কমান্ড ব্যবহৃত হয় git remote | সাধারণত গিটহাবের নতুন রিপোজিটরির SSH-URL এর  সাথে  রিমোট কানেকশন তৈরিতে \ngit remote add remote_name SSH-url\nআমাদের লোকাল কোন ডিরেক্টরির মধ্যে কতগুলো রিমোট কানেকশন আছে তা দেখার জন্য git remote -v\nরিমোট কানেকশন ডিলেট করার জন্য\ngit remote rm remote_name</string>

    <string name="states_Description">
 ></string>

    <string name="git_status">গিটের বর্তমান status check করাঃআমরা এখন আমাদের গিটের বর্তমান স্ট্যাটাস দেখতে চাচ্ছি, অর্থাৎ কোন কোন ফাইল ট্র্যাক করা হয় নি বা কোন ফাইল স্টেজিং এ আছে। সেজন্যে আমরা নিচের এই কমান্ডটি ব্যবহার করব:\ngit status
    </string>
    <string name="git_add">ধরুন আমরা কোনো ফাইল কে ট্র্যাক করতে চাই অর্থাৎ কোনো ফাইলকে Staging এরিয়াতে নিতে চাই। সেজন্যে আমাদেরকে নিচের কমান্ডটি দিতে হবেঃ\ngit add student1.txt\n
এখন কমিট করলে গিট শুধুমাত্র ওই ফাইলটাকেই version হিস্টোরীতে রাখবে | এখন যদি আমরা চাই যে এই ডিরেক্টরির ভিতরের সব আন-ট্র্যাকড ফাইলকে ট্র্যাক করতে একটা কমান্ড দিয়ে তাহলে git এর কমান্ডটি হবে নিচের মতো :
git add --all / git add .</string>

    <string name="commit_descrpition">commit মানে হচ্ছে final. অর্থাৎ আপনি ফাইনাল সিদ্ধান্ত নিবেন আপনার ট্র্যাক করা চেঞ্জেসগুলোকে গিট রিপোতে রাখবেন কিনা? যদি গিট রিপোতে রাখবেন মনে ,করেন, তাহলে আপনাকে কমিট করতে হবে। আর কমিট করতে চাইলে, প্রত্যেক কমিটের সাথে একটা ম্যাসেজও দিতে হয় যাতে পরবর্তিতে যেকোনো সময় আপনার বুঝতে সুবিধা হয় কোন কমিটটা ঠিক কি কারণে করা হয়েছিলো। সবকিছু এক লাইনে এভাবে হবেঃ\ngit commit -m "New Message Added"
    </string>
    <string name="git_log_1">এখন আপনার আগের ভার্শনে ফিরে যাওয়া দরকার | আর এর জন্য আমাদের কে প্রথমে log check করতে হবে। চলুন প্রথমে লগ চেক করে দেখি :\ngit log\nএখন আপনি নিচের মতো লগ গুলো দেখতে পারবেন :</string>
    <string name="git_log_2">উপরের ছবিটিতে লক্ষ্য করে থাকবেন এখানে একটি কমিট আছে। সাথে ডিটেইলস সহ, কমিটের ম্যাসেজ দেখে খুব সহজেই আপনি বুঝতে পারবেন কোন কমিটে কি করা হয়েছিলো। আর সাথে কিছু এনক্রিপ্টেড ইউনিক কমিট আই ডি আছে। আপনি চাইলে এগুলো ইউজ করে আবার পূর্বের ভার্শনগুলোয় ফিরে যেতে পারবেন।\nতবে এখানে একটু কমপ্লেক্সিটি আছে, আর তা হচ্ছে প্রতিটি কমিট এর Unique Id টি অনেক বেশি লেংথ এর। এখন যদি এই ID গুলোকে আরো সহজ এবং ছোট করে দেখতে চাই তাহলে নিচের কমান্ডটি লিখতে হবে।\ngit log --oneline</string>
    <string name="git_log_3">এখানে সুন্দর করে ছোটো করে প্রয়োজনীয় সব দেখাচ্ছে। এখন এইখানের শর্টকাট ইউনিক কমিট আইডিগুলোও শর্ট করে দেওয়া হয়েছে। এখন আমরা এই শর্ট ভার্শনগুলো ব্যবহার করে আগের কাঙ্ক্ষিত ভার্শনে ফিরে যেতে পারব।ফিরে যাওয়ার জন্য এখন আপনার কমান্ডটি হবে এই রকম :\ngit checkout </string>
    <string name="checkout_description">git checkout কমান্ড গিট ব্রাঞ্চ গলোর মধ্যে সুইচ করা এবং ফাইল restore করার জন্য ব্যাবহার করা হয়। সহজ কথায় বলতে গেলে এটাকে প্রজেক্টের বিভিন্ন ভার্সনের মধ্যে সুইচ করার একটি রাস্তা হিসেবে বিবেচনা করা যেতে পারে। এই কমান্ড তিনটি উপদানের উপর অপারেশন করতে পারে। যথা, ফাইল, কমিট, ব্রাঞ্চ |</string>


    <string name="clone_pull">git clone একটি কমান্ড যা গিট রিপোজিটরি থেকে পূর্ণ কপি তৈরি করে নতুন একটি লোকাল রিপোজিটরি তৈরি করে। এটি প্রথম বারে রিপোজিটরিকে ডাউনলোড করতে ব্যবহৃত হয় এবং পরে এই লোকাল কপিতে পরিবর্তনগুলি জমা দেওয়ার জন্য ব্যবহার করা যায়।\n\ngit pull একটি কমান্ড যা সাধারণত ডেভেলপাররা commit করেছেন তাদের স্থানীয় রিপোজিটরিতে নতুন পরিবর্তনগুলি ডাউনলোড করে। এটি পূর্বের কমান্ডগুলির অবশিষ্ট অবস্থানে থাকে এবং রিমোট রিপোজিটরির নতুন পরিবর্তনগুলি আপডেট করে তা স্থানীয় রিপোজিটরিতে প্রকাশ করে।</string>

    <string name="config_des">গিট ইন্সটল করার পরে প্রথমবার গিট কনফিগার করা|গিট কনফিগার করার জন্য আমাদের git config কমান্ড দিতে হবে। গিট এর কনফিগ কমান্ড এই লেভেল গুলিতে কাজ করতে পারে,
\n1.লোকাল লেভেল (Local level): লোকাল লেভেল গিট কনফিগ শুধু প্রজেক্ট ফোল্ডারেই সীমাবদ্ধ থাকে। এর কনফিগারেশন অপশন হলো –local। গিটের কমান্ডে যদি কোন কনফিগারেশন অপশন দেয়া না হয় তবে Default ভাবে লোকাল লেভেল কনফিগ করা হয়।
\n2.গ্লোবাল লেভেল (Global level): গ্লোবাল লেভেল কনফিগ শুধু একটি অপারাটিং সিস্টেমের নির্দিস্ট ইউজারের উপর প্রয়োগ হয়। তার মানে একজন ইউজার আরেকজন ইউজারের কনফিগারেশন এক্সেস করতে পারবে না। এর কনফিগারেশন অপশন প্যারামিটার হলো –global.
\n3.সিস্টেম লেভেল (System level): সিস্টেম লেভেল কনফিগারেশন একটি অপারেটিং সিস্টেমের সকল ইউজার ব্যাবহার করতে পারে। এর অপশন প্যারামিটার হল –system.\n
গিট ইন্সটল করার পরে আমাদেরকে প্রথমেই ইউজার নেম (User name) এবং ইমেইল সেটআপ করে নিতে হবে। এর জন্য আমরা (লিনাক্স) টার্মিনাল এ গিয়ে কমান্ড করবো/ Windows ইউজার রা cmd তে গিয়ে/ git bash চালু করে এই কমান্ড দিতে হবে,
\ngit config --global user.email "aziz29ru@gmail.com"
\ngit config --global user.name "Aziz"\n
এই কমান্ড করার পরে আমাদের কনফিগ গিটের গ্লোবাল লেভেলে সেভ হবে। –global বাদ দিলে লোকাল লেভেলে সেভ হবে। কনফিগ সেট হয়েছে কিনা তা দেখার জন্য আমরা নিচের কমান্ড দুটি দিবো,
\ngit config user.email\ngit config user.name |
    </string>
    <string name="init_des">git init কমান্ডটি একটি ডিরেক্টরিতে একটি নতুন গিট ডিরেক্টরি তৈরি করতে ব্যবহৃত হয়। আপনি যখন git init দিয়ে একটি ডিরেক্টরি শুরু করেন, তখন গিট তার প্রয়োজনীয় ডেটা স্ট্রাকচার এবং ফাইল সেট আপ করে।
    </string>

    <string name="ssh_des">SSH (Secure Shell) কী হল ক্রিপ্টোগ্রাফিক কী যা সার্ভার বা অন্য যেকোনো ম্যাশিনের সাথে কানেক্ট করার জন্যে প্রটোকল হিসাবে ইউজ হয়। কিন্তু এটা অনেক কড়াকড়িভাবে সিকিউরড। বিশেষ করে দূরবর্তী লগইন এবং ফাইল স্থানান্তরের প্রসঙ্গে।
SSH সাধারণত বেশী ব্যবহার করা হয়ঃ
গিটহাব বা এরকম কোড শেয়ারিং কোনো সাইটের ক্ষেত্রে
নিজের ওয়েব সার্ভারের সাথে কানেক্ট হওয়ার জন্যে
রিমোট প্লেস থেকে নিজের কোনো সার্ভার, কম্পিউটার বা ম্যাশিনের কন্ট্রোল নেওয়ার জন্যে
একটি SSH কী দুটি অংশ নিয়ে গঠিত: পাবলিক কী এবং প্রাইভেট  কী।আপনি যে সার্ভার সাথে কানেক্ট হবেন তাকে পাবলিক কী দিবেন। সে সেটা নিয়ে স্টোর করে রাখবে।আপনি যখন একটি SSH সার্ভারের সাথে সংযোগ করার চেষ্টা করেন, তখন আপনার ক্লায়েন্ট (যেমন, আপনার কম্পিউটার) সার্ভার দ্বারা প্রেরিত একটি চ্যালেঞ্জ স্বাক্ষর করতে আপনার প্রাইভেট  কী ব্যবহার করবে। সার্ভার আপনার পাবলিক  কী ব্যবহার করে এই স্বাক্ষরটি পরীক্ষা করে, যা এটি ইতিমধ্যেই রয়েছে। যদি স্বাক্ষর মিলে যায়, সার্ভার আপনাকে পাবলিক কী-এর সাথে যুক্ত প্রাইভেট  কী-এর ধারক হিসেবে অথেনটিকেট করে।এখন আমাদের এই কীগুলো জেনারেট করা লাগবে।প্রথমে আপনার গিট ব্যাস এর কমান্ড লাইন ওপেন করুন বা লিনাক্স এর টর্মনালের রুট ইউজার ডিরেক্টরিতে চলে যান। নিচের এই কমান্ড দিয়ে কী জেনারেট করতে পারবেনঃ
ssh-keygen -t ed25519 -C "your_email@example.com"\nsave এর জন্য এন্টার কী চাপুন |একাধিক ssh-key এর জন্য নাম দিয়ে save করূন| passphrse আপনি কোনোকিছু পূরন না করলেও হবে।এন্টার কী চাপুন|
</string>
    <string name="ssh_des1">এখন .ssh ফোল্ডারে ২টা ফাইল দেখতে পারবেন | এর মধ্যে .pub আছে যেটাতে সেটা হচ্ছে পাবলিক কী। যেটা সবার সাথে শেয়ার করতে পারবেন। কিন্তু প্রাইভেট কী শেয়ার করা যাবে না |  এখন সবার শেষে আমাদের ম্যাশিনে আপাতত শেষ কাজ হচ্ছে আমরা যে এই SSH কী ইউজ করতে চাচ্ছি সেটা আমাদের সিস্টেমকে বলে দিতে হবে। এটার জন্যে একটা SSH Agent আছে সেটা ইউজ করে বলতে হবে। তাই প্রথমে আমরা এজেন্ট স্টার্ট করবোঃ \neval $(ssh-agent -s)\n
এটা কি করে আপাতত জানার দরকার নাই, কিন্তু আমাদের এজেন্ট স্টার্ট হবে এরকম কিছু একটা দেখিয়েঃ</string>
    <string name="ssh_des2">এখন আমরা আমাদের সিস্টেমকে বলবো আমাদের নতুন জেনারেট করা SSH কীওগুলো ইউজ করতেঃ
ssh-add 2nd_key\nতারপর আইডেন্টিটি অ্যাড হয়েছে বলে একটা ম্যাসেজ পাবেনঃ
    </string>
    <string name="ssh_des3">ব্যাস! এখন আপনার ম্যাশিনে SSH কী সফলভাবে সেটাপ হয়ে গেছে। এখন আপনার কোড এডিটর দিয়ে আপনার জেনারেট করা কীগুলোর মধ্যে পাবলিক কী টা(.pub দিয়ে যেটা শেষ হইছে) ওপেন করুন। তারপর ভিতরের কন্টেন্টগুলো কপি করুন পুরোটা।এখন আপনি এই SSH যে সার্ভারে ইউজ করবেন সেখানে SSH কী অ্যাড করার অপশন পাবেন। বা আমরা গিটহাবে ইউজ করবো। গিটহাবেও SSH অ্যাড করার অপশন আছে। গিটহাবে লগইন করুন। তারপর ডান পাশে উপরে আপনার প্রোফাইল পিকচারের উপরে ক্লিক করে সেটিংস এ যান|এখানে গেলে এবার বাম দিকে অনেকগুলো অপশনের মধ্যে SSH and GPG keys নামেও একটা অপশন পাবেন|সবশেষে Add SSH Key বাটনে ক্লিক করুন। করলে তারপর আপনার গিটহাবের পাসওয়ার্ড চাইবে, পাসওয়ার্ড দিতে হবে। দিয়ে তারপর সাবমিট করলে এরকম কিছু একটা দেখতে পাবেনঃ</string>

   <string name="ssh_test">SSH connection Testing নিচের এই কমান্ড দিয়ে \nssh -T git@github.com\n আইডেন্টিটি অ্যাড হয়েছে বলে একটা ম্যাসেজ পাবেনঃ</string>
</resources>